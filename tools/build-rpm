#!/usr/bin/env python3

import os
import shutil
from datetime import datetime
from pathlib import Path
from subprocess import PIPE, run
from tempfile import NamedTemporaryFile

from tomli import load
from tomli_w import dump

base = Path(__file__).resolve().absolute().parent.parent

version_tag = "%global pypi_version "
source_tag = "Source0:        "
autosetup_tag = "%autosetup -n "
check_tag = "%check"
egg_tag = "%{python3_sitelib}/%{pypi_name}-"

change_log = """
%changelog
* {date} Package Robot <package@robot.nowhere> - 2.0.0^alpha
- Automatic build of revision {revision}
"""


def fix_spec(spec, version, package, revision):
    version_rpm = version.replace("+", "^")
    with spec.open("r", encoding="UTF-8") as f:
        data = f.read()
    with spec.open("w", encoding="UTF-8") as f:
        ignore = False
        for line in data.splitlines():
            if line.startswith("%changelog"):
                date = datetime.now().strftime("%a %b %d %Y")
                f.write(change_log.format(date=date, revision=revision))
                break
            if not line.strip():
                ignore = False
            if line.startswith(version_tag):
                f.write(f"{version_tag}{version_rpm}\n")
            elif line.startswith(source_tag):
                f.write(f"{source_tag}{package}\n")
            elif line.startswith(autosetup_tag):
                f.write(f"{autosetup_tag}pyaptly-{version}")
            elif line.startswith(egg_tag):
                f.write(f"{egg_tag}{version}-py%{{python3_version}}.egg-info")
            elif line.startswith(check_tag):
                ignore = True
            elif not ignore:
                f.write(f"{line}\n")


def main():
    build_id = run(
        ["git", "rev-parse", "--short", "HEAD"],
        stdout=PIPE,
        check=True,
        encoding="UTF-8",
    ).stdout.strip()
    dist = base / "dist"
    shutil.rmtree(dist, ignore_errors=True)
    target = Path(os.path.expanduser("~/rpmbuild"))
    shutil.rmtree(target, ignore_errors=True)
    pyproject = base / "pyproject.toml"
    with pyproject.open("rb") as f:
        project = load(f)
        version_orig = project["tool"]["poetry"]["version"]
        version = f"{version_orig}+{build_id}"
        project["tool"]["poetry"]["version"] = version
    try:
        temp_toml_path = None
        with NamedTemporaryFile("wb", delete=False) as temp_toml:
            temp_toml_path = Path(temp_toml.name)
            with pyproject.open("rb") as f:
                temp_toml.write(f.read())
            with pyproject.open("wb") as f:
                dump(project, f)
        # hack to disable git: poetry has a bug
        git = Path("/usr/bin/git")
        git_dis = Path("/usr/bin/git_dis")
        git.rename(git_dis)
        run(["poetry", "build"], check=True)
    finally:
        git_dis.rename(git)
        if temp_toml_path:
            with temp_toml_path.open("rb") as temp_file:
                with pyproject.open("wb") as f:
                    f.write(temp_file.read())

    package = Path(list(dist.glob("pyaptly-*+*.tar.gz"))[0])
    run(["pyp2rpm", "-s", "-d", target, package], check=True)
    spec = target / "SPECS" / "python-pyaptly.spec"
    sources = target / "SOURCES"
    sources.mkdir()
    shutil.copy2(package, sources)
    fix_spec(spec, version, package.name, build_id)
    run(["rpmbuild", "-bs", spec], check=True)
    srpms = target / "SRPMS"
    rpm = str(list(srpms.glob("python-pyaptly-*.src.rpm"))[0])
    shutil.copy2(rpm, dist)


if __name__ == "__main__":
    main()
